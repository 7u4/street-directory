openapi: 3.0.1
info:
  title: Greeter Microservice
  description: Microservice for greeting people
  contact:
    name: Marc Kohaupt
    url: http://debuglevel.de
  license:
    name: Unlicense
    url: https://unlicense.org/
  version: "0.1"
paths:
  /postalcodes:
    get:
      tags:
      - postalcodes
      summary: "Get all [Postalcode]s"
      description: "Get all [Postalcode]s"
      operationId: getAllPostalcodes
      parameters: []
      responses:
        "200":
          description: "All [Postalcode]s"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetPostalcodeResponse'
    post:
      tags:
      - postalcodes
      summary: |-
        Create a [Postalcode].
         This is not meant for productive use, but rather for uploading backups.
      description: |-
        Create a [Postalcode].
         This is not meant for productive use, but rather for uploading backups.
      operationId: postOnePostalcode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
              - addPostalcodeRequest
              type: object
              properties:
                addPostalcodeRequest:
                  $ref: '#/components/schemas/AddPostalcodeRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPostalcodeResponse'
    delete:
      tags:
      - postalcodes
      summary: "Delete all [Postalcode]s."
      description: "Delete all [Postalcode]s."
      operationId: deleteAllPostalcodes
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /postalcodes/populate/{areaId}:
    post:
      tags:
      - postalcodes
      operationId: populate
      parameters:
      - name: areaId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: populate 200 response
  /postalcodes/{id}:
    get:
      tags:
      - postalcodes
      summary: "Get a [Postalcode]"
      description: "Get a [Postalcode]"
      operationId: getOnePostalcode
      parameters:
      - name: id
        in: path
        description: "ID of the [Postalcode]"
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: "A [Postalcode]"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostalcodeResponse'
    delete:
      tags:
      - postalcodes
      summary: "Delete a [Postalcode]."
      description: "Delete a [Postalcode]."
      operationId: deleteOnePostalcode
      parameters:
      - name: id
        in: path
        description: "ID of the [Postalcode]"
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /streets:
    get:
      tags:
      - streets
      summary: "Get all [Street]s matching the [postalcode] and the [streetname]."
      description: "Get all [Street]s matching the [postalcode] and the [streetname]."
      operationId: getAllStreets
      parameters:
      - name: postalcode
        in: query
        required: false
        schema:
          type: string
          nullable: true
      - name: streetname
        in: query
        required: false
        schema:
          type: string
          nullable: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetStreetResponse'
    post:
      tags:
      - streets
      summary: |-
        Create a street.
         This is not meant for productive use, but rather for uploading backups.
      description: |-
        Create a street.
         This is not meant for productive use, but rather for uploading backups.
      operationId: postOneStreet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
              - addStreetRequest
              type: object
              properties:
                addStreetRequest:
                  $ref: '#/components/schemas/AddStreetRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddStreetResponse'
    delete:
      tags:
      - streets
      summary: Delete all streets.
      description: Delete all streets.
      operationId: deleteAllStreets
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /streets/populate/{areaId}:
    post:
      tags:
      - streets
      operationId: populate_1
      parameters:
      - name: areaId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: populate_1 200 response
  /streets/{id}:
    get:
      tags:
      - streets
      summary: Get a street
      description: Get a street
      operationId: getOneStreet
      parameters:
      - name: id
        in: path
        description: ID of the street
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A street
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStreetResponse'
    delete:
      tags:
      - streets
      summary: Delete a street.
      description: Delete a street.
      operationId: deleteOneStreet
      parameters:
      - name: id
        in: path
        description: ID of the street
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
components:
  schemas:
    AddPostalcodeRequest:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: The actual value of the postal code
        centerLatitude:
          type: number
          description: Latitude of the center of the postal code area
          format: double
          nullable: true
        centerLongitude:
          type: number
          description: Longitude of the center of the postal code area
          format: double
          nullable: true
        note:
          type: string
          description: A note which might be available from some providers
          nullable: true
        lastStreetExtractionOn:
          type: string
          description: DateTime when the last attempt to street extraction was made;
            null if not yet attempted.
          format: date-time
          nullable: true
    AddPostalcodeResponse:
      required:
      - code
      - createdOn
      - id
      - lastModifiedOn
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: The actual value of the postal code
        centerLatitude:
          type: number
          description: Latitude of the center of the postal code area
          format: double
          nullable: true
        centerLongitude:
          type: number
          description: Longitude of the center of the postal code area
          format: double
          nullable: true
        note:
          type: string
          description: A note which might be available from some providers
          nullable: true
        lastStreetExtractionOn:
          type: string
          description: DateTime when the last attempt to street extraction was made;
            null if not yet attempted.
          format: date-time
          nullable: true
        createdOn:
          type: string
          description: When created in the database
          format: date-time
        lastModifiedOn:
          type: string
          description: When last modified in the database
          format: date-time
    AddStreetRequest:
      required:
      - postalcode
      - streetname
      type: object
      properties:
        postalcode:
          type: string
          description: The postal code
        streetname:
          type: string
          description: The name of the street
        centerLatitude:
          type: number
          description: Latitude of the center of the postal code area
          format: double
          nullable: true
        centerLongitude:
          type: number
          description: Longitude of the center of the postal code area
          format: double
          nullable: true
    AddStreetResponse:
      required:
      - createdOn
      - id
      - lastModifiedOn
      - postalcode
      - streetname
      type: object
      properties:
        id:
          type: string
          format: uuid
        postalcode:
          type: string
          description: The postal code
        streetname:
          type: string
          description: The name of the street
        centerLatitude:
          type: number
          description: Latitude of the center of the postal code area
          format: double
          nullable: true
        centerLongitude:
          type: number
          description: Longitude of the center of the postal code area
          format: double
          nullable: true
        createdOn:
          type: string
          description: When created in the database
          format: date-time
        lastModifiedOn:
          type: string
          description: When last modified in the database
          format: date-time
    GetPostalcodeResponse:
      required:
      - code
      - createdOn
      - id
      - lastModifiedOn
      - streetsCount
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: The actual value of the postal code
        streetsCount:
          type: integer
          description: Number of streets associated with this postal code
          format: int32
        centerLatitude:
          type: number
          description: Latitude of the center of the postal code area
          format: double
          nullable: true
        centerLongitude:
          type: number
          description: Longitude of the center of the postal code area
          format: double
          nullable: true
        note:
          type: string
          description: A note which might be available from some providers
          nullable: true
        lastStreetExtractionOn:
          type: string
          description: DateTime when the last attempt to street extraction was made;
            null if not yet attempted.
          format: date-time
          nullable: true
        createdOn:
          type: string
          description: When created in the database
          format: date-time
        lastModifiedOn:
          type: string
          description: When last modified in the database
          format: date-time
    GetStreetResponse:
      required:
      - createdOn
      - id
      - lastModifiedOn
      - postalcode
      - streetname
      type: object
      properties:
        id:
          type: string
          format: uuid
        postalcode:
          type: string
          description: The postal code
        streetname:
          type: string
          description: The name of the street
        centerLatitude:
          type: number
          description: Latitude of the center of the postal code area
          format: double
          nullable: true
        centerLongitude:
          type: number
          description: Longitude of the center of the postal code area
          format: double
          nullable: true
        createdOn:
          type: string
          description: When created in the database
          format: date-time
        lastModifiedOn:
          type: string
          description: When last modified in the database
          format: date-time
    Unit:
      type: object
